WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

script = !{SOI ~ (expression ~ ";")* ~ expression? ~ EOI}


keyword = @{
    "False"
    | "True"
    | "None"
    | "else"
    | "let"
    | "for"
    | "in"
    | "if"
    | "->"
    | "~>"
    | "=="
    | ">="
    | "<="
    | "//"
    | "&&"
    | "to"
    | "<"
    | ">"
    | "+"
    | "-"
    | "'"
    | "@"
}

symbol = @{
    !(keyword ~ (WHITESPACE | EOI))
    ~ (ASCII_ALPHA | "_" | "+" | "-" | "." | "~" | "\\" | "/" | "?" | "&" | "<" | ">" | "$" | "%" | "#" | "^" | "=")
    ~(ASCII_ALPHANUMERIC | "_" | "+" | "-" | "." | "\\" | "/" | "?" | "&" | "<" | ">" | "$" | "%" | "#" | "^" | "=")*
}

symbol_as_string = @{ symbol }

number  = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
integer = @{ "-"? ~ number }
float   = @{ integer ~ "." ~ number }
boolean = @{ "True" | "False" }
nothing = @{ "None" }

quote  = @{ "'" ~ simple_expression }

string  = @{ "\"" ~ inner ~ ("\"" | EOI) }
inner   = @{ (!("\"" | "\\") ~ ANY)* ~ (escape ~ inner)? }
escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

assign = !{ "let" ~ symbol ~ "=" ~ expression }

grouped = !{ "(" ~ expression ~ ")" }

list = !{
    "[" ~ (simple_expression ~ ",")* ~ simple_expression? ~ "]"
}

map = !{
    "{"
        ~ ((symbol_as_string | string) ~ ":" ~ simple_expression ~ ",")*
        ~ ((symbol_as_string | string) ~ ":" ~ simple_expression)?
        ~ "}"
}

for_expr = !{
    "for" ~ symbol ~ "in" ~ (range | simple_expression) ~ do_expr
}

if_expr = !{
    "if" ~ very_complex_expression ~ simple_expression
        ~ ("else" ~ simple_expression)?
}

lambda_expr = !{
    symbol ~ "->" ~ (do_expr | expression)
}

macro_expr = !{
    symbol ~ "~>" ~ (do_expr | expression)
}

do_expr = !{
    "{" ~ (expression ~ ";")* ~ expression? ~ "}"
}

apply = !{
    tiny_expression ~ simple_expression+
}

expression = ${
    assign
    | for_expr
    | if_expr
    | lambda_expr
    | macro_expr
    | apply
    | very_complex_expression
}

and = !{ complex_expression ~ "&&" ~ very_complex_expression }
or = !{ complex_expression ~ "||" ~ very_complex_expression }
not = !{ "!" ~ complex_expression }

eq = !{ simple_expression ~ "==" ~ simple_expression }
neq = !{ simple_expression ~ "!=" ~ simple_expression }
lt = !{ simple_expression ~ "<" ~ simple_expression }
gt = !{ simple_expression ~ ">" ~ simple_expression }
lte = !{ simple_expression ~ "<=" ~ simple_expression }
gte = !{ simple_expression ~ ">=" ~ simple_expression }
range = !{ simple_expression ~ "to" ~ simple_expression }

add = ${ simpler_expression ~ WHITESPACE ~ "+" ~ WHITESPACE ~ simpler_expression }
sub = ${ simpler_expression ~ WHITESPACE ~ "-" ~ WHITESPACE ~ simpler_expression }
mul = ${ tiny_expression ~ WHITESPACE ~ "*" ~ WHITESPACE ~ tiny_expression }
div = ${ tiny_expression ~ WHITESPACE ~ "//" ~ WHITESPACE ~ tiny_expression }
rem = ${ tiny_expression ~ WHITESPACE ~ "%" ~ WHITESPACE ~ tiny_expression }

index = ${atomic_expression ~ ("@" ~ (symbol_as_string | integer))+}

very_complex_expression = ${
    and
    | or
    | complex_expression
}

complex_expression = ${
    not
    | range
    | (
        &simple_expression ~
        (
            eq
            | neq
            | lte
            | gte
            | lt
            | gt
        )
    )
    | simple_expression
}

simple_expression = ${
    add
    | sub
    | simpler_expression
}

simpler_expression = ${
    mul
    | div
    | rem
    | tiny_expression
}

tiny_expression = ${
    index
    | atomic_expression
}

atomic_expression = ${
    grouped
    | quote
    | map
    | do_expr
    | list
    | nothing
    | float
    | integer
    | boolean
    | string
    | symbol
}
